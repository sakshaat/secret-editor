{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","result","updateResult","_useState3","_useState4","input","updateInput","_useState5","_useState6","password","updatePassword","_useState7","_useState8","isEncrypt","updateIsEncrypt","useEffect","plaintext","RC4","encrypt","enc","Utf16","parse","toString","ciphertext","decrypt","react_default","a","createElement","className","type","value","checked","onChange","e","target","rows","placeholder","readOnly","style","cursor","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OA6EeA,MAxEf,WAAe,IAAAC,EACkBC,mBAAS,IAD3BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACEI,EADFJ,EAAA,GAAAK,EAEgBN,mBAAS,IAFzBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAENE,EAFMD,EAAA,GAECE,EAFDF,EAAA,GAAAG,EAGsBV,mBAAS,YAH/BW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGNE,EAHMD,EAAA,GAGIE,EAHJF,EAAA,GAAAG,EAIwBd,oBAAS,GAJjCe,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAINE,EAJMD,EAAA,GAIKE,EAJLF,EAAA,GAcb,OARAG,oBAAU,WAENb,EADEW,EAyDR,SAAiBG,EAAWP,GAC1B,OAAOQ,MAAIC,QAAQC,MAAIC,MAAMC,MAAML,GAAYP,GAAUa,WAzDxCJ,CAAQb,EAAOI,GA4DlC,SAAiBc,EAAYd,GAC3B,OAAOQ,MAAIO,QAAQD,EAAYd,GAAUa,SAASH,MAAIC,OA3DrCI,CAAQnB,EAAOI,KAE7B,CAACJ,EAAOI,EAAUI,IAGnBY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,SACEE,KAAK,QACLC,MAAM,UACNC,QAASlB,EACTmB,SAAU,kBAAMlB,GAAgB,MALpC,YAUFW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,SACEE,KAAK,QACLC,MAAM,UACNC,SAAUlB,EACVmB,SAAU,kBAAMlB,GAAgB,MALpC,aAWJW,EAAAC,EAAAC,cAAA,SACEE,KAAK,OACLC,MAAOrB,EACPuB,SAAU,SAAAC,GAAC,OAAIvB,EAAeuB,EAAEC,OAAOJ,UAEzCL,EAAAC,EAAAC,cAAA,YACEQ,KAAK,KACLC,YAAY,YACZJ,SAAU,SAAAC,GAAC,OAAI3B,EAAY2B,EAAEC,OAAOJ,QACpCA,MAAOzB,IAEToB,EAAAC,EAAAC,cAAA,YACEQ,KAAK,KACLC,YAAY,aACZC,UAAQ,EACRC,MAAO,CAAEC,OAAQ,WACjBT,MAAO7B,OClDGuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b6b14920.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { RC4, enc } from \"crypto-js\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [result, updateResult] = useState(\"\");\n  const [input, updateInput] = useState(\"\");\n  const [password, updatePassword] = useState(\"PASSWORD\");\n  const [isEncrypt, updateIsEncrypt] = useState(true);\n\n  useEffect(() => {\n    if (isEncrypt) {\n      updateResult(encrypt(input, password));\n    } else {\n      updateResult(decrypt(input, password));\n    }\n  }, [input, password, isEncrypt]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          <div className=\"radio\">\n            <label>\n              <input\n                type=\"radio\"\n                value=\"encrypt\"\n                checked={isEncrypt}\n                onChange={() => updateIsEncrypt(true)}\n              />\n              Encrypt\n            </label>\n          </div>\n          <div className=\"radio\">\n            <label>\n              <input\n                type=\"radio\"\n                value=\"decrypt\"\n                checked={!isEncrypt}\n                onChange={() => updateIsEncrypt(false)}\n              />\n              Decrypt\n            </label>\n          </div>\n        </div>\n        <input\n          type=\"text\"\n          value={password}\n          onChange={e => updatePassword(e.target.value)}\n        />\n        <textarea\n          rows=\"10\"\n          placeholder=\"plaintext\"\n          onChange={e => updateInput(e.target.value)}\n          value={input}\n        />\n        <textarea\n          rows=\"10\"\n          placeholder=\"ciphertext\"\n          readOnly\n          style={{ cursor: \"default\" }}\n          value={result}\n        />\n      </header>\n    </div>\n  );\n}\n\nfunction encrypt(plaintext, password) {\n  return RC4.encrypt(enc.Utf16.parse(plaintext), password).toString();\n}\n\nfunction decrypt(ciphertext, password) {\n  return RC4.decrypt(ciphertext, password).toString(enc.Utf16);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}